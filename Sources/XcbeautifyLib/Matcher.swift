struct Matcher {
    static let aggregateTargetMatcher = makeMatcher(pattern: .aggregateTarget)
    static let analyzeMatcher = makeMatcher(pattern: .analyze)
    static let analyzeTargetMatcher = makeMatcher(pattern: .analyzeTarget)
    static let buildTargetMatcher = makeMatcher(pattern: .buildTarget)
    static let checkDependenciesErrorsMatcher = makeMatcher(pattern: .checkDependenciesErrors)
    static let checkDependenciesMatcher = makeMatcher(pattern: .checkDependencies)
    static let clangErrorMatcher = makeMatcher(pattern: .clangError)
    static let cleanRemoveMatcher = makeMatcher(pattern: .cleanRemove)
    static let cleanTargetMatcher = makeMatcher(pattern: .cleanTarget)
    static let codesignFrameworkMatcher = makeMatcher(pattern: .codesignFramework)
    static let codesignMatcher = makeMatcher(pattern: .codesign)
    static let compileCommandMatcher = makeMatcher(pattern: .compileCommand)
    static let compileErrorMatcher = makeMatcher(pattern: .compileError)
    static let compileMatcher = makeMatcher(pattern: .compile)
    static let compileStoryboardMatcher = makeMatcher(pattern: .compileStoryboard)
    static let compileWarningMatcher = makeMatcher(pattern: .compileWarning)
    static let compileXibMatcher = makeMatcher(pattern: .compileXib)
    static let copyHeaderMatcher = makeMatcher(pattern: .copyHeader)
    static let copyPlistMatcher = makeMatcher(pattern: .copyPlist)
    static let copyStringsMatcher = makeMatcher(pattern: .copyStrings)
    static let cpresourceMatcher = makeMatcher(pattern: .cpresource)
    static let cursorMatcher = makeMatcher(pattern: .cursor)
    static let executedMatcher = makeMatcher(pattern: .executed)
    static let executedWithSkippedMatcher = makeMatcher(pattern: .executedWithSkipped)
    static let failingTestMatcher = makeMatcher(pattern: .failingTest)
    static let fatalErrorMatcher = makeMatcher(pattern: .fatalError)
    static let fileMissingErrorMatcher = makeMatcher(pattern: .fileMissingError)
    static let generateCoverageDataMatcher = makeMatcher(pattern: .generateCoverageData)
    static let generatedCoverageReportMatcher = makeMatcher(pattern: .generatedCoverageReport)
    static let generateDsymMatcher = makeMatcher(pattern: .generateDsym)
    static let genericWarningMatcher = makeMatcher(pattern: .genericWarning)
    static let ldErrorMatcher = makeMatcher(pattern: .ldError)
    static let ldWarningMatcher = makeMatcher(pattern: .ldWarning)
    static let libtoolMatcher = makeMatcher(pattern: .libtool)
    static let linkerDuplicateSymbolsLocationMatcher = makeMatcher(pattern: .linkerDuplicateSymbolsLocation)
    static let linkerDuplicateSymbolsMatcher = makeMatcher(pattern: .linkerDuplicateSymbols)
    static let linkerUndefinedSymbolLocationMatcher = makeMatcher(pattern: .linkerUndefinedSymbolLocation)
    static let linkerUndefinedSymbolsMatcher = makeMatcher(pattern: .linkerUndefinedSymbols)
    static let linkingMatcher = makeMatcher(pattern: .linking)
    static let moduleIncludesErrorMatcher = makeMatcher(pattern: .moduleIncludesError)
    static let noCertificateMatcher = makeMatcher(pattern: .noCertificate)
    static let packageGraphResolvingStart = makeMatcher(pattern: .packageGraphResolvingStart)
    static let packageGraphResolvingEnded = makeMatcher(pattern: .packageGraphResolvingEnded)
    static let packageGraphResolvedItem = makeMatcher(pattern: .packageGraphResolvedItem)
    static let parallelTestCaseFailedMatcher = makeMatcher(pattern: .parallelTestCaseFailed)
    static let parallelTestCasePassedMatcher = makeMatcher(pattern: .parallelTestCasePassed)
    static let parallelTestCaseAppKitPassedMatcher = makeMatcher(pattern: .parallelTestCaseAppKitPassed)
    static let parallelTestingStartedMatcher = makeMatcher(pattern: .parallelTestingStarted)
    static let parallelTestingPassedMatcher = makeMatcher(pattern: .parallelTestingPassed)
    static let parallelTestingFailedMatcher = makeMatcher(pattern: .parallelTestingFailed)
    static let parallelTestSuiteStartedMatcher = makeMatcher(pattern: .parallelTestSuiteStarted)
    static let pbxcpMatcher = makeMatcher(pattern: .pbxcp)
    static let phaseScriptExecutionMatcher = makeMatcher(pattern: .phaseScriptExecution)
    static let phaseSuccessMatcher = makeMatcher(pattern: .phaseSuccess)
    static let podsErrorMatcher = makeMatcher(pattern: .podsError)
    static let preprocessMatcher = makeMatcher(pattern: .preprocess)
    static let processInfoPlistMatcher = makeMatcher(pattern: .processInfoPlist)
    static let processPchCommandMatcher = makeMatcher(pattern: .processPchCommand)
    static let processPchMatcher = makeMatcher(pattern: .processPch)
    static let provisioningProfileRequiredMatcher = makeMatcher(pattern: .provisioningProfileRequired)
    static let restartingTestsMatcher = makeMatcher(pattern: .restartingTests)
    static let shellCommandMatcher = makeMatcher(pattern: .shellCommand)
    static let symbolReferencedFromMatcher = makeMatcher(pattern: .symbolReferencedFrom)
    static let testCaseMeasuredMatcher = makeMatcher(pattern: .testCaseMeasured)
    static let testCasePassedMatcher = makeMatcher(pattern: .testCasePassed)
    static let testCasePendingMatcher = makeMatcher(pattern: .testCasePending)
    static let testCaseStartedMatcher = makeMatcher(pattern: .testCaseStarted)
    static let testSuiteStartMatcher = makeMatcher(pattern: .testSuiteStart)
    static let testSuiteStartedMatcher = makeMatcher(pattern: .testSuiteStarted)
    static let testSuiteAllTestsPassedMatcher = makeMatcher(pattern: .testSuiteAllTestsPassed)
    static let testSuiteAllTestsFailedMatcher = makeMatcher(pattern: .testSuiteAllTestsFailed)
    static let testsRunCompletionMatcher = makeMatcher(pattern: .testsRunCompletion)
    static let tiffutilMatcher = makeMatcher(pattern: .tiffutil)
    static let touchMatcher = makeMatcher(pattern: .touch)
    static let uiFailingTestMatcher = makeMatcher(pattern: .uiFailingTest)
    static let undefinedSymbolLocationMatcher = makeMatcher(pattern: .undefinedSymbolLocation)
    static let willNotBeCodeSignedMatcher = makeMatcher(pattern: .willNotBeCodeSigned)
    static let writeAuxiliaryFilesMatcher = makeMatcher(pattern: .writeAuxiliaryFiles)
    static let writeFileMatcher = makeMatcher(pattern: .writeFile)
}

var shouldUseParserMatcher = false

func makeMatcher(pattern: Pattern) -> Matching {
    if shouldUseParserMatcher {
        return ParserMatcher()
    } else {
        return RegexMatcher(pattern: pattern)
    }
}
